taskKey="com.javarush.games.snake.part12"\n\nИгра змейка (12/20)

У нас уже есть змейка, которая умеет двигаться, и яблоко. Теперь реализуем их взаимодействие. Для начала добавь переменную яблока в
класс SnakeGame, и в момент создания игры инициализируй ее координатами (5, 5). Также прорисуй яблоко.

Перепиши метод move() класса Snake. Теперь в качестве аргумента он должен принимать яблоко, и если окажется, что змейка "съела" яблоко, состояние
яблока должно устанавливаться в "неживое", а размер змейки — увеличиваться на 1 элемент.


Требования:
1.	В классе SnakeGame должно существовать приватное поле Apple apple.
2.	В методе createGame() поле apple необходимо инициализировать новым объектом типа Apple с параметрами 5, 5 перед вызовом метода drawScene().
3.	В методе drawScene() необходимо вызвать у apple метод draw(Game) после отрисовки змеи. В качестве параметра передай в метод this.
4.	В классе Snake не должен существовать метод public void move().
5.	В классе Snake должен существовать публичный метод void move(Apple apple).
6.	В методе move(Apple), если координаты новой головы змеи совпадают с координатами яблока, необходимо установить яблоку isAlive=false и не удалять хвост змеи.
7.	В методе onTurn(int) класса SnakeGame необходимо вызвать у змеи метод move(Apple).


Игра змейка (12/20)

У нас уже есть змейка, которая умеет двигаться, и яблоко. Теперь реализуем их взаимодействие. Для начала добавь переменную яблока в
класс SnakeGame, и в момент создания игры инициализируй ее координатами (5, 5). Также прорисуй яблоко.

Перепиши метод move() класса Snake. Теперь в качестве аргумента он должен принимать яблоко, и если окажется, что змейка "съела" яблоко, состояние
яблока должно устанавливаться в "неживое", а размер змейки — увеличиваться на 1 элемент.



Игра змейка (12/20)

У нас уже есть змейка, которая умеет двигаться, и яблоко. Теперь реализуем их взаимодействие. Для начала добавь переменную яблока в
класс SnakeGame, и в момент создания игры инициализируй ее координатами (5, 5). Также прорисуй яблоко.

Перепиши метод move() класса Snake. Теперь в качестве аргумента он должен принимать яблоко, и если окажется, что змейка "съела" яблоко, состояние
яблока должно устанавливаться в "неживое", а размер змейки — увеличиваться на 1 элемент.



Игра змейка (12/20)

У нас уже есть змейка, которая умеет двигаться, и яблоко. Теперь реализуем их взаимодействие. Для начала добавь переменную яблока в
класс SnakeGame, и в момент создания игры инициализируй ее координатами (5, 5). Также прорисуй яблоко.

Перепиши метод move() класса Snake. Теперь в качестве аргумента он должен принимать яблоко, и если окажется, что змейка "съела" яблоко, состояние
яблока должно устанавливаться в "неживое", а размер змейки — увеличиваться на 1 элемент.



Игра змейка (12/20)

У нас уже есть змейка, которая умеет двигаться, и яблоко. Теперь реализуем их взаимодействие. Для начала добавь переменную яблока в
класс SnakeGame, и в момент создания игры инициализируй ее координатами (5, 5). Также прорисуй яблоко.

Перепиши метод move() класса Snake. Теперь в качестве аргумента он должен принимать яблоко, и если окажется, что змейка "съела" яблоко, состояние
яблока должно устанавливаться в "неживое", а размер змейки — увеличиваться на 1 элемент.



Игра змейка (12/20)

У нас уже есть змейка, которая умеет двигаться, и яблоко. Теперь реализуем их взаимодействие. Для начала добавь переменную яблока в
класс SnakeGame, и в момент создания игры инициализируй ее координатами (5, 5). Также прорисуй яблоко.

Перепиши метод move() класса Snake. Теперь в качестве аргумента он должен принимать яблоко, и если окажется, что змейка "съела" яблоко, состояние
яблока должно устанавливаться в "неживое", а размер змейки — увеличиваться на 1 элемент.



