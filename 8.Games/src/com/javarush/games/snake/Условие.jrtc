taskKey="com.javarush.games.snake.part09"\n\nИгра змейка (9/20)

Движение змейки очень простое: в соседней с головой ячейке создается новая голова, а последний элемент (хвост) змейки удаляется.

В классе Snake реализуй метод createNewHead(), который создает новый элемент GameObject и возвращает его. Новый
элемент GameObject должен создаваться рядом с элементом, в котором на данный момент находится голова змейки (элемент с индексом 0 из snakeParts).
Новый элемент GameObject создается с той стороны, куда движется змейка (поле direction).
Пример:
- если змейка движется влево, new GameObject(headX-1, headY);
- если змейка движется вниз, new GameObject(headX, headY + 1)
Здесь headX — координата головы змеи x, headY — координата головы змеи y.

Примечание: координаты могут быть отрицательные и/или быть за границами игрового поля. Пока что это нормально, в дальнейших частях задачи исправим.

В классе Snake создай метод removeTail() и реализуй его.


Требования:
1.	В классе Snake должен существовать публичный метод GameObject createNewHead().
2.	Метод createNewHead() должен быть реализован согласно условию.
3.	В классе Snake должен существовать публичный метод void removeTail().
4.	Метод removeTail() должен удалять последний элемент из списка snakeParts.


Игра змейка (9/20)

Движение змейки очень простое: в соседней с головой ячейке создается новая голова, а последний элемент (хвост) змейки удаляется.

В классе Snake реализуй метод createNewHead(), который создает новый элемент GameObject и возвращает его. Новый
элемент GameObject должен создаваться рядом с элементом, в котором на данный момент находится голова змейки (элемент с индексом 0 из snakeParts).
Новый элемент GameObject создается с той стороны, куда движется змейка (поле direction).
Пример:
- если змейка движется влево, new GameObject(headX-1, headY);
- если змейка движется вниз, new GameObject(headX, headY + 1)
Здесь headX — координата головы змеи x, headY — координата головы змеи y.

Примечание: координаты могут быть отрицательные и/или быть за границами игрового поля. Пока что это нормально, в дальнейших частях задачи исправим.

В классе Snake создай метод removeTail() и реализуй его.



Игра змейка (9/20)

Движение змейки очень простое: в соседней с головой ячейке создается новая голова, а последний элемент (хвост) змейки удаляется.

В классе Snake реализуй метод createNewHead(), который создает новый элемент GameObject и возвращает его. Новый
элемент GameObject должен создаваться рядом с элементом, в котором на данный момент находится голова змейки (элемент с индексом 0 из snakeParts).
Новый элемент GameObject создается с той стороны, куда движется змейка (поле direction).
Пример:
- если змейка движется влево, new GameObject(headX-1, headY);
- если змейка движется вниз, new GameObject(headX, headY + 1)
Здесь headX — координата головы змеи x, headY — координата головы змеи y.

Примечание: координаты могут быть отрицательные и/или быть за границами игрового поля. Пока что это нормально, в дальнейших частях задачи исправим.

В классе Snake создай метод removeTail() и реализуй его.



Игра змейка (9/20)

Движение змейки очень простое: в соседней с головой ячейке создается новая голова, а последний элемент (хвост) змейки удаляется.

В классе Snake реализуй метод createNewHead(), который создает новый элемент GameObject и возвращает его. Новый
элемент GameObject должен создаваться рядом с элементом, в котором на данный момент находится голова змейки (элемент с индексом 0 из snakeParts).
Новый элемент GameObject создается с той стороны, куда движется змейка (поле direction).
Пример:
- если змейка движется влево, new GameObject(headX-1, headY);
- если змейка движется вниз, new GameObject(headX, headY + 1)
Здесь headX — координата головы змеи x, headY — координата головы змеи y.

Примечание: координаты могут быть отрицательные и/или быть за границами игрового поля. Пока что это нормально, в дальнейших частях задачи исправим.

В классе Snake создай метод removeTail() и реализуй его.



Игра змейка (9/20)

Движение змейки очень простое: в соседней с головой ячейке создается новая голова, а последний элемент (хвост) змейки удаляется.

В классе Snake реализуй метод createNewHead(), который создает новый элемент GameObject и возвращает его. Новый
элемент GameObject должен создаваться рядом с элементом, в котором на данный момент находится голова змейки (элемент с индексом 0 из snakeParts).
Новый элемент GameObject создается с той стороны, куда движется змейка (поле direction).
Пример:
- если змейка движется влево, new GameObject(headX-1, headY);
- если змейка движется вниз, new GameObject(headX, headY + 1)
Здесь headX — координата головы змеи x, headY — координата головы змеи y.

Примечание: координаты могут быть отрицательные и/или быть за границами игрового поля. Пока что это нормально, в дальнейших частях задачи исправим.

В классе Snake создай метод removeTail() и реализуй его.



Игра змейка (9/20)

Движение змейки очень простое: в соседней с головой ячейке создается новая голова, а последний элемент (хвост) змейки удаляется.

В классе Snake реализуй метод createNewHead(), который создает новый элемент GameObject и возвращает его. Новый
элемент GameObject должен создаваться рядом с элементом, в котором на данный момент находится голова змейки (элемент с индексом 0 из snakeParts).
Новый элемент GameObject создается с той стороны, куда движется змейка (поле direction).
Пример:
- если змейка движется влево, new GameObject(headX-1, headY);
- если змейка движется вниз, new GameObject(headX, headY + 1)
Здесь headX — координата головы змеи x, headY — координата головы змеи y.

Примечание: координаты могут быть отрицательные и/или быть за границами игрового поля. Пока что это нормально, в дальнейших частях задачи исправим.

В классе Snake создай метод removeTail() и реализуй его.



