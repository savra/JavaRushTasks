taskKey="com.javarush.games.snake.part15"\n\nИгра змейка (15/20)

Для хранения состояния игры нам понадобится переменная isGameStopped в классе SnakeGame. Проинициализируй
её в методе createGame(). Когда игра проиграна, её нужно остановить и вывести сообщение об этом игроку.
Для этого создай метод gameOver() и добавь в него команды, которые выполняются при остановке игры (проигрыше):
- вызов метода stopTurnTimer();
- присвоение флагу isGameStopped значения true;
- вывод сообщения "GAME OVER".
Проверку состояния флага isGameStopped нужно проводить в конце каждого хода, и если игра остановлена, вызывать метод gameOver().


Требования:
1.	В классе SnakeGame должно существовать приватное поле boolean isGameStopped.
2.	В методе createGame() поле isGameStopped должно быть инициализировано значением false перед вызовом метода drawScene().
3.	В классе SnakeGame должен существовать приватный метод void gameOver().
4.	В методе gameOver() должен вызываться метод родительского класса stopTurnTimer().
5.	В методе gameOver() полю isGameStopped должно устанавливаться значение true.
6.	В методе gameOver() должен вызываться метод родительского класса showMessageDialog(Color, String, Color, int).
7.	В методе onTurn(int) должен вызываться метод gameOver() перед методом drawScene(), если змея мертвая (isAlive == false).


Игра змейка (15/20)

Для хранения состояния игры нам понадобится переменная isGameStopped в классе SnakeGame. Проинициализируй
её в методе createGame(). Когда игра проиграна, её нужно остановить и вывести сообщение об этом игроку.
Для этого создай метод gameOver() и добавь в него команды, которые выполняются при остановке игры (проигрыше):
- вызов метода stopTurnTimer();
- присвоение флагу isGameStopped значения true;
- вывод сообщения "GAME OVER".
Проверку состояния флага isGameStopped нужно проводить в конце каждого хода, и если игра остановлена, вызывать метод gameOver().



Игра змейка (15/20)

Для хранения состояния игры нам понадобится переменная isGameStopped в классе SnakeGame. Проинициализируй
её в методе createGame(). Когда игра проиграна, её нужно остановить и вывести сообщение об этом игроку.
Для этого создай метод gameOver() и добавь в него команды, которые выполняются при остановке игры (проигрыше):
- вызов метода stopTurnTimer();
- присвоение флагу isGameStopped значения true;
- вывод сообщения "GAME OVER".
Проверку состояния флага isGameStopped нужно проводить в конце каждого хода, и если игра остановлена, вызывать метод gameOver().



Игра змейка (15/20)

Для хранения состояния игры нам понадобится переменная isGameStopped в классе SnakeGame. Проинициализируй
её в методе createGame(). Когда игра проиграна, её нужно остановить и вывести сообщение об этом игроку.
Для этого создай метод gameOver() и добавь в него команды, которые выполняются при остановке игры (проигрыше):
- вызов метода stopTurnTimer();
- присвоение флагу isGameStopped значения true;
- вывод сообщения "GAME OVER".
Проверку состояния флага isGameStopped нужно проводить в конце каждого хода, и если игра остановлена, вызывать метод gameOver().



Игра змейка (15/20)

Для хранения состояния игры нам понадобится переменная isGameStopped в классе SnakeGame. Проинициализируй
её в методе createGame(). Когда игра проиграна, её нужно остановить и вывести сообщение об этом игроку.
Для этого создай метод gameOver() и добавь в него команды, которые выполняются при остановке игры (проигрыше):
- вызов метода stopTurnTimer();
- присвоение флагу isGameStopped значения true;
- вывод сообщения "GAME OVER".
Проверку состояния флага isGameStopped нужно проводить в конце каждого хода, и если игра остановлена, вызывать метод gameOver().



Игра змейка (15/20)

Для хранения состояния игры нам понадобится переменная isGameStopped в классе SnakeGame. Проинициализируй
её в методе createGame(). Когда игра проиграна, её нужно остановить и вывести сообщение об этом игроку.
Для этого создай метод gameOver() и добавь в него команды, которые выполняются при остановке игры (проигрыше):
- вызов метода stopTurnTimer();
- присвоение флагу isGameStopped значения true;
- вывод сообщения "GAME OVER".
Проверку состояния флага isGameStopped нужно проводить в конце каждого хода, и если игра остановлена, вызывать метод gameOver().



