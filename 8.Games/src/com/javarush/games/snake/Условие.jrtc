taskKey="com.javarush.games.snake.part10"\n\nИгра змейка (10/20)

Теперь нужно скомбинировать работу методов createNewHead() и removeTail(). Удобно сделать это в методе move().

Добавь проверку на выход змейки за пределы игрового поля. Если новая голова вышла за пределы игрового поля, установи состояние змейки в "неживая".

После передвижения змейки нужно очищать игровое поле от уже несуществующих ее элементов. Для этого в методе drawScene() нужно не только
изменять цвет ячеек, но и устанавливать в их значении пустую строку.


Требования:
1.	В методе move() класса Snake должен вызываться метод createNewHead().
2.	В методе move() результат вызова метода createNewHead() необходимо добавить в snakeParts на позицию с индексом 0.
3.	В методе move() класса Snake после создания новой головы змеи должен вызываться метод removeTail().
4.	В методе move(), если метод createNewHead() вернул элемент, у которого координаты находятся вне игрового поля, необходимо установить полю isAlive значение false и больше ничего не делать.
5.	В классе SnakeGame в методе drawScene() необходимо заменить вызов метода setCellColor(int, int, Color) на вызов метода setCellValueEx(int, int, Color, String) с параметрами: x, y, цвет (например, Color.DARKSEAGREEN) и пустая строка.


Игра змейка (10/20)

Теперь нужно скомбинировать работу методов createNewHead() и removeTail(). Удобно сделать это в методе move().

Добавь проверку на выход змейки за пределы игрового поля. Если новая голова вышла за пределы игрового поля, установи состояние змейки в "неживая".

После передвижения змейки нужно очищать игровое поле от уже несуществующих ее элементов. Для этого в методе drawScene() нужно не только
изменять цвет ячеек, но и устанавливать в их значении пустую строку.



Игра змейка (10/20)

Теперь нужно скомбинировать работу методов createNewHead() и removeTail(). Удобно сделать это в методе move().

Добавь проверку на выход змейки за пределы игрового поля. Если новая голова вышла за пределы игрового поля, установи состояние змейки в "неживая".

После передвижения змейки нужно очищать игровое поле от уже несуществующих ее элементов. Для этого в методе drawScene() нужно не только
изменять цвет ячеек, но и устанавливать в их значении пустую строку.



Игра змейка (10/20)

Теперь нужно скомбинировать работу методов createNewHead() и removeTail(). Удобно сделать это в методе move().

Добавь проверку на выход змейки за пределы игрового поля. Если новая голова вышла за пределы игрового поля, установи состояние змейки в "неживая".

После передвижения змейки нужно очищать игровое поле от уже несуществующих ее элементов. Для этого в методе drawScene() нужно не только
изменять цвет ячеек, но и устанавливать в их значении пустую строку.



Игра змейка (10/20)

Теперь нужно скомбинировать работу методов createNewHead() и removeTail(). Удобно сделать это в методе move().

Добавь проверку на выход змейки за пределы игрового поля. Если новая голова вышла за пределы игрового поля, установи состояние змейки в "неживая".

После передвижения змейки нужно очищать игровое поле от уже несуществующих ее элементов. Для этого в методе drawScene() нужно не только
изменять цвет ячеек, но и устанавливать в их значении пустую строку.



Игра змейка (10/20)

Теперь нужно скомбинировать работу методов createNewHead() и removeTail(). Удобно сделать это в методе move().

Добавь проверку на выход змейки за пределы игрового поля. Если новая голова вышла за пределы игрового поля, установи состояние змейки в "неживая".

После передвижения змейки нужно очищать игровое поле от уже несуществующих ее элементов. Для этого в методе drawScene() нужно не только
изменять цвет ячеек, но и устанавливать в их значении пустую строку.



